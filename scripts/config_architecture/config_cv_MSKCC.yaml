save_dir: "C:/Users/ncaptier/OneDrive - INSTITUT CURIE/Python/attention-latefus/output/MSKCC/RECIST/cross_val/"
exp_id: path_omics
n_gpu: 0

cross_val_data:

  # Define a train-validation split if needed
  validation_split: null # 0.15

  # 1. Load raw data from your files
  loader:
    type: "load_MSKCC_multimoda"
    args:
      clinical_file: "C:/Users/ncaptier/OneDrive - INSTITUT CURIE/Python/attention-latefus/data/MSKCC/clinicals.csv"
      radiomics_file: "C:/Users/ncaptier/OneDrive - INSTITUT CURIE/Python/attention-latefus/data/MSKCC/radiomics.csv"
      pathomics_file: "C:/Users/ncaptier/OneDrive - INSTITUT CURIE/Python/attention-latefus/data/MSKCC/pathomics.csv"
      omics_file: "C:/Users/ncaptier/OneDrive - INSTITUT CURIE/Python/attention-latefus/data/MSKCC/omics.csv"
      pdl1_file: "C:/Users/ncaptier/OneDrive - INSTITUT CURIE/Python/attention-latefus/data/MSKCC/pdl1.csv"

      clinical_features: ['age', 'pack_years', 'ecog', 'albumin', 'dnlr', 'brain_mets', 'liver_mets', 'tumor_burden',
                          'therapy_line', 'recieves_combo_therapy', 'site_lung', 'recieves_pdl1_therapy', 'hist_adeno']
      radiomic_features:
      omics_features:
      pathomics_features:
      outcome: 'RECIST'

  ensembling:
    strategy: null # "StratifiedKFold"
    n_splits: null # 5

  # 2. Build a dataset from the loaded raw data
  dataset: "MSKCCDataset"

  # processing steps to apply on the different data modalities
  processing:

    radiomics_PL:
      scaler:
        strategy: 'robust'

    radiomics_LN:
      scaler:
        strategy: 'robust'

    radiomics_PC:
      scaler:
        strategy: 'robust'

    pathomics:
      scaler:
        strategy: 'robust'

    omics:
      scaler:
        strategy: 'robust'

    pdl1:
      scaler:
        strategy: 'robust'

    clinicals:
      imputer:
        numericals: [1]
        categoricals: [10]
      scaler:
        strategy: 'robust'

   # 3. Define data loader with or without oversampling and data augmentation

  sampler: False #whether to use oversampling for the minority class during training (only for classification !)
  drop_modalities: False #whether to use data augmentation during training (dropping randomly modalties)

  training_data_loader:
    batch_size: 256
    shuffle: true
    num_workers: 0

#radiomics_transform:
#  lesion_type: ['PC', 'LN', 'PL']
#  robustness_cutoff: 0.15
#  outlier_cutoff: 6
#  l1_strength: 0.1
#  aggregation: 'largest'
radiomics_transform: null

cross_val:
  seed: 0
  strategy: "KFold" #"StratifiedKFold"
  n_splits: 10


testing:
  loss:
    type: "BCELogitLoss"
    args:
  metrics: ["balanced_accuracy_with_logit", "roc_auc"]


training:

  save_period: null
  save_best_only: null #true
  print_period: null
  verbosity: 1
  tensorboard: false
  monitor: "off" #"ema_min val_loss"
  ema_alpha: 0.9
  early_stop: 50
  epochs: 125
  loss:
    type: "BCELogitLoss"
    args:
  l2_penalty: 0.001
  attention_penalty: null
  balanced_weights: True
  metrics: ["balanced_accuracy", "roc_auc"]

  pseudo_labelling: false
  unlabelled_loss:
    type: "UnlabelledBCELoss"
    args:
      threshold: 0.2

  unlabelled_scheduler:
    type: "StepScheduler"
    args:
      wait: 40

  optimizer:
    type: "Adam"
    args:
      lr: 0.01
#      weight_decay: 0.005

  lr_scheduler:
    type:

#  lr_scheduler:
#    type: "StepLR"
#    args:
#      step_size: 50
#      gamma: 0.1

